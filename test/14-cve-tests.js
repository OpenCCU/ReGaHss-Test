/* global describe, it */
/* eslint-disable no-unused-vars, import/no-unassigned-import, no-template-curly-in-string, camelcase, max-nested-callbacks, prefer-arrow-callback, capitalized-comments */

const path = require('path');
const fs = require('fs');
const async = require('async');
const request = require('request');

const {
    cp,
    rega,
    subscribe,
    procs,
    simSubscriptions,
    simBuffer,
    regaSubscriptions,
    regaBuffer,
    flavors,
    indent,
    initTest,
    cleanupTest
} = require('../lib/helper.js');

require('should');

function fromDir(startPath, filter, callback) {
    if (!fs.existsSync(startPath)) {
        console.log('no dir_ ', startPath);
        return;
    }

    const files = fs.readdirSync(startPath);
    for (let i = 0; i < files.length; i++) {
        const filename = path.join(startPath, files[i]);
        const stat = fs.lstatSync(filename);
        if (stat.isDirectory()) {
            if (fromDir(filename, filter, callback) === false) {
                return false;
            }
        } else if (filter.test(filename)) {
            if (callback(filename) === false) {
                return false;
            }
        }
    }

    return true;
}

flavors.forEach(function (flavor) {
    describe('Running ' + __filename.split('/').reverse()[0] + ' [' + flavor + ']', function () {
        // initialize test environment
        initTest(flavor, false);

        describe('testing for fixed CVE/security issues...', function () {
            it('CVE-2019-9726 (NUL-byte URL request vulnerability)', function (done) {
                this.timeout(30000);
                request('http://127.0.0.1:8183/.%00./.%00./etc/config/homematic.regadom', function (err, response, body) {
                    if (err) {
                        done(err);
                    } else if (body.includes('<name>DOM</name>')) {
                        done(new Error('could retrieve whole homematic.regadom'));
                    } else if (body === 'Not Found') {
                        done();
                    } else {
                        done(new Error('webserver did not reply with "Not Found"'));
                    }
                });
            });

            it('CVE-2019-9583 (session id exposure)', function (done) {
                this.timeout(60000);
                const urlArray = [];
                fromDir('/www', /\.(htm|html|cgi)$/, function (filename) {
                    const urlpath = filename.replace(/^\/www/, '').replace(/^\/rega/, '');
                    urlArray.push(urlpath);
                });
                let counter = 0;
                async.whilst(
                    function () {
                        // Test if we have processed all records
console.log('counter: ' + counter + ' : ' + urlArray.length);
                        return counter < urlArray.length;
                    },
                    function (callback) {
console.log('call');
                        const rec = urlArray[counter++];
console.log('requesting: ' + rec);
                        request({url: 'http://127.0.0.1:8183' + rec, followRedirect: false}, function (err, response, body) {
                            if (err) {
                                callback(err, counter);
                            } else if (typeof (response.headers.location) !== 'undefined' &&
                                       response.headers.location.includes('sid=@')) {
                                callback(new Error(rec + ' returned vulerable Location: header with sid=@@ (' + response.headers.location + ')'), counter);
                            } else {
                                callback(null, counter);
                            }
                        });
                    },
                    function (err) {
console.log('done: ' + err);
                        if (err) {
                            done(err);
                        } else {
                            done();
                        }
                    }
                );
            });

            it('CVE-2019-14474 (unexpected Call("") crash)', function (done) {
                this.timeout(30000);
                rega.exec(`
WriteLine("before");
Call("");
WriteLine("after");
                `, function (err, output, objects) {
                    if (err) {
                        done(err);
                    } else {
                        output.should.equal(`before\r\nafter\r\n`);
                        done();
                    }
                });
            });

            it('POST request session-less vulnerability (body)', function (done) {
                this.timeout(30000);
                request.post({url: 'http://127.0.0.1:8183/esp/system.htm', body: 'WriteLine("1234");', followRedirect: false}, function (err, response, body) {
                    if (err) {
                        done(err);
                    } else {
                        body.should.equal(``);
                        done();
                    }
                });
            });

            it('POST request session-less vulnerability (root body)', function (done) {
                this.timeout(30000);
                request.post({url: 'http://127.0.0.1:8183/', body: 'WriteLine("1234");', followRedirect: false}, function (err, response, body) {
                    if (err) {
                        done(err);
                    } else {
                        body.should.not.containEql('1234\r\n');
                        done();
                    }
                });
            });

            it('POST request session-less vulnerability (url params)', function (done) {
                this.timeout(30000);
                request.post({url: 'http://127.0.0.1:8183/esp/system.htm?action=%22TestRunning%22%3B', body: '0815', followRedirect: false}, function (err, response, body) {
                    if (err) {
                        done(err);
                    } else {
                        response.statusCode.should.equal(302);
                        done();
                    }
                });
            });
        });

        // cleanup test environment
        cleanupTest(flavor);
    });
});
